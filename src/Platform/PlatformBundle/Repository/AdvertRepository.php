<?php

namespace Platform\PlatformBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends EntityRepository
{

    public function getAdverts($page, $nbPerPage){
        /*$queryBuilder = $this->createQueryBuilder('a')
            ->orderBy('a.date','DESC')
            ->getQuery(); Avoid up the load time*/
        
        $queryBuilder = $this->createQueryBuilder('a')
            ->leftJoin('a.image','i')
            ->addSelect('i')

            ->leftJoin('a.categories','c')
            ->addSelect('c')

            ->orderBy('a.date','DESC')
            ->getQuery();

        $queryBuilder->setFirstResult(($page-1) * $nbPerPage)
             ->setMaxResults($nbPerPage);
        
        return new Paginator($queryBuilder, true);
        //return $queryBuilder->getResult();
    }

    public function getLastAdvertByLimit($limit){
        $queryBuilder = $this->createQueryBuilder('a')
            ->orderBy('a.date','DESC')
            ->setMaxResults($limit)
            ->getQuery();

        return $queryBuilder->getResult();
    }
    public function myFindAll(){
        /*$queryBuilder = $this->_em->createQueryBuilder()
            ->select('a')
            ->from($this->_entityName,'a');

        $queryBuilder = $this->createQueryBuilder('a');

        $query = $queryBuilder->getQuery();

        $results = $query->getResult();

        return $results; =========> */
        return $this->createQueryBuilder('a')
            ->getQuery()
            ->getResult();
    }

    public function getById($id){
        $queryBuilder = $this->createQueryBuilder('a');

        $queryBuilder
            ->where('a.id = :id')
            ->setParameter('id', $id);
        
        //return $queryBuilder->getQuery()->getResult();
        return $queryBuilder->getQuery()->getOneOrNullResult();
    }

    public function findByAuthorAndDate($author,$year){
        $queryBuilder = $this->createQueryBuilder('a');

        $queryBuilder
            ->where('a.author = :author')
                ->setParameter('author', $author)
            ->andWhere('a.date < :year')
                ->setParameter(':year', $year)
            ->orderBy('a.date','DESC');

        return $queryBuilder->getQuery()->getResult();
    }

    public function whereCurrentYear(QueryBuilder $queryBuilder){

        $queryBuilder
            ->andWhere('a.date BETWEEN :start AND :end')
            ->setParameter('start', new \Datetime(date('Y').'-01-01'))
            ->setParameter('end', new \Datetime(date('Y').'-12-31'));

    }

    public function myFind(){
        /*$queryBuilder = $this->createQueryBuilder('a');

        $queryBuilder
            ->where('a.author = :author')
            ->setParameter('author','Author');

        $this->whereCurrentYear($queryBuilder);

        $queryBuilder->orderBy('a.date','DESC');

        return $queryBuilder
            ->getQuery()
            ->getResult();*/
            $queryBuilder = $this->createQueryBuilder('a');
            $listAdverts = $queryBuilder->getQuery()->getResult();
            var_dump($listAdverts);
    }

    public function myFindDQL($id){
        $query = $this->_em->createQuery("SELECT a FROM PlatformPlatformBundle:Advert a WHERE a.id = :id");
        $query->setParameter('id',$id);

        return $query->getSingleResult();
    }

    public function getAdvertJoinApplication(){
        $queryBuilder = $this
            ->createQueryBuilder('a')
            ->leftJoin('a.applications','app')
            ->addSelect('app');
        
        return $queryBuilder
            ->getQuery()
            ->getResult();
    }

    public function getAdvertWithCategories(array $categoryNames){
        $queryBuilder = $this
            ->createQueryBuilder('a')
            ->leftJoin('a.categories','c')
            ->addSelect('c');
        
        $queryBuilder->where(
            $queryBuilder->expr()->in(
                'c.name', $categoryNames
            )
        );
            
        return $queryBuilder
            ->getQuery()
            ->getResult();
    }

    public function isFlood($ip, $delai){

        $result = $this->createQueryBuilder('a')
            ->select('a')
            ->where('a.ip LIKE :ip')
                ->setParameter('ip',$ip)
            ->addOrderBy('a.id','DESC')->setMaxResults(1)->getQuery()->getOneOrNullResult();

    //     $result = $this->findOneBy(array(
    //         'ip'=>'::1'
    //    ),
    //    array('id'=>'DESC')) ;

       if($this->calculDiffDate($result,$delai)){return true;}
    }

    public function calculDiffDate($result, $delai) {
        $delai = $delai*100;
        
        if($result){
            $date = new \DateTime();
            $interval = date_diff($date,$result->getDateAdd());
            $interval = explode(':',$interval->format('%h:%i:%s'));
            //
            if($interval[0] == 0 && $interval[1] == 0 && $interval[2] <= 15){
                return true;
            }
            //$interval = $date->getTimestamp() - $result->getDate()->getTimestamp();
            
            // if($interval < $delai){
            //     var_dump($interval);
            //     return true;
            // }
        }

        return false;
        // $query = $this->_em->createQuery("SELECT a FROM PlatformPlatformBundle:Advert a WHERE a.date < :today")
        //                 ->setParameter('today', new \DateTime())
        //                 ->addOrderBy('id','DESC');

        // $query = $this->createQueryBuilder('a')
        //      //->where('TIMESTAMPDIFF(SECOND, :today, a.date) > 15')
             
        //      ->setParameter('today', new \DateTime())
        //      ->addOrderBy('a.id','DESC');
        // return $query->getQuery()->getResult();
        //SELECT e FROM AppBundle:Event e WHERE e.datestart > CURRENT_DATE()

        // return $this->findOneBy(array(
        //     'ip'=>'::1'
        // ),
        // array('id'=>'DESC')) ;
        
        // return $this->createQueryBuilder('a')
        //     ->where('')
        //     ->getQuery()
        //     ->getResult();
        // $queryBuilder = $this->_em->createBuilder()
        //     ->select('a')
        //     ->form($this->_entityName,'a')

        // return $queryBuilder = $this->createQuery('SELECT e FROM PlatformPlatformBundle:Advert e WHERE e.ip > "'.'::1'.'"');
        
        /*$qb = $entityManager->createQueryBuilder();
        $qb->select('count(account.id)');
        $qb->from('PlatformPlatformBundle:Advert','account');*/

        //return $count = $qb->getQuery()->getSingleScalarResult();
        //return = $this->createQueryBuilder('a')->expr()->gte("a.date", "DATE_SUB(a.startDate, 7, 'day')")
        // return $this->getEntityManager()->findOneBy(
        //     array('id' => 'DESC')
        // );
       // return $query =$this->_em->createQuery('select a, DATE_DIFF(CURRENT_DATE(), a.date) as days from PlatformPlatformBundle:Advert WHERE a.ip = "'.'::1'.'"');
       /*$query = $this->_em->createQuery("SELECT TimeDiff(CURRENT_DATE(), a.date) FROM PlatformPlatformBundle:Advert a WHERE a.ip = :ip");
       $query->setParameter('ip','::1');*/

       //return $query->getSingleResult();
    }
}
