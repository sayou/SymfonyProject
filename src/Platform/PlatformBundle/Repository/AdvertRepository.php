<?php

namespace Platform\PlatformBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends EntityRepository
{

    public function getAdverts($page, $nbPerPage){
        /*$queryBuilder = $this->createQueryBuilder('a')
            ->orderBy('a.date','DESC')
            ->getQuery(); Avoid up the load time*/
        
        $queryBuilder = $this->createQueryBuilder('a')
            ->leftJoin('a.image','i')
            ->addSelect('i')

            ->leftJoin('a.categories','c')
            ->addSelect('c')

            ->orderBy('a.date','DESC')
            ->getQuery();

        $queryBuilder->setFirstResult(($page-1) * $nbPerPage)
             ->setMaxResults($nbPerPage);
        
        return new Paginator($queryBuilder, true);
        //return $queryBuilder->getResult();
    }

    public function getLastAdvertByLimit($limit){
        $queryBuilder = $this->createQueryBuilder('a')
            ->orderBy('a.date','DESC')
            ->setMaxResults($limit)
            ->getQuery();

        return $queryBuilder->getResult();
    }
    public function myFindAll(){
        /*$queryBuilder = $this->_em->createQueryBuilder()
            ->select('a')
            ->from($this->_entityName,'a');

        $queryBuilder = $this->createQueryBuilder('a');

        $query = $queryBuilder->getQuery();

        $results = $query->getResult();

        return $results; =========> */
        return $this->createQueryBuilder('a')
            ->getQuery()
            ->getResult();
    }

    public function getById($id){
        $queryBuilder = $this->createQueryBuilder('a');

        $queryBuilder
            ->where('a.id = :id')
            ->setParameter('id', $id);
        
        //return $queryBuilder->getQuery()->getResult();
        return $queryBuilder->getQuery()->getOneOrNullResult();
    }

    public function findByAuthorAndDate($author,$year){
        $queryBuilder = $this->createQueryBuilder('a');

        $queryBuilder
            ->where('a.author = :author')
                ->setParameter('author', $author)
            ->andWhere('a.date < :year')
                ->setParameter(':year', $year)
            ->orderBy('a.date','DESC');

        return $queryBuilder->getQuery()->getResult();
    }

    public function whereCurrentYear(QueryBuilder $queryBuilder){

        $queryBuilder
            ->andWhere('a.date BETWEEN :start AND :end')
            ->setParameter('start', new \Datetime(date('Y').'-01-01'))
            ->setParameter('end', new \Datetime(date('Y').'-12-31'));

    }

    public function myFind(){
        /*$queryBuilder = $this->createQueryBuilder('a');

        $queryBuilder
            ->where('a.author = :author')
            ->setParameter('author','Author');

        $this->whereCurrentYear($queryBuilder);

        $queryBuilder->orderBy('a.date','DESC');

        return $queryBuilder
            ->getQuery()
            ->getResult();*/
            $queryBuilder = $this->createQueryBuilder('a');
            $listAdverts = $queryBuilder->getQuery()->getResult();
            var_dump($listAdverts);
    }

    public function myFindDQL($id){
        $query = $this->_em->createQuery("SELECT a FROM PlatformPlatformBundle:Advert a WHERE a.id = :id");
        $query->setParameter('id',$id);

        return $query->getSingleResult();
    }

    public function getAdvertJoinApplication(){
        $queryBuilder = $this
            ->createQueryBuilder('a')
            ->leftJoin('a.applications','app')
            ->addSelect('app');
        
        return $queryBuilder
            ->getQuery()
            ->getResult();
    }

    public function getAdvertWithCategories(array $categoryNames){
        $queryBuilder = $this
            ->createQueryBuilder('a')
            ->leftJoin('a.categories','c')
            ->addSelect('c');
        
        $queryBuilder->where(
            $queryBuilder->expr()->in(
                'c.name', $categoryNames
            )
        );
            
        return $queryBuilder
            ->getQuery()
            ->getResult();
    }
}
